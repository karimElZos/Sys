(function () { var n, i, u, f, e, o, s, t, h, r = [].slice, c = function (n, t) { function r() { this.constructor = n } for (var i in t) l.call(t, i) && (n[i] = t[i]); return r.prototype = t.prototype, n.prototype = new r, n.__super__ = t.prototype, n }, l = {}.hasOwnProperty; t = function () { }; i = function () { function n() { } return n.prototype.addEventListener = n.prototype.on, n.prototype.on = function (n, t) { return this._callbacks = this._callbacks || {}, this._callbacks[n] || (this._callbacks[n] = []), this._callbacks[n].push(t), this }, n.prototype.emit = function () { var i, u, n, f, t, e; if (f = arguments[0], i = 2 <= arguments.length ? r.call(arguments, 1) : [], this._callbacks = this._callbacks || {}, n = this._callbacks[f], n) for (t = 0, e = n.length; t < e; t++)u = n[t], u.apply(this, i); return this }, n.prototype.removeListener = n.prototype.off, n.prototype.removeAllListeners = n.prototype.off, n.prototype.removeEventListener = n.prototype.off, n.prototype.off = function (n, t) { var f, i, r, u, e; if (!this._callbacks || arguments.length === 0) return this._callbacks = {}, this; if (i = this._callbacks[n], !i) return this; if (arguments.length === 1) return delete this._callbacks[n], this; for (r = u = 0, e = i.length; u < e; r = ++u)if (f = i[r], f === t) { i.splice(r, 1); break } return this }, n }(); n = function (n) { function f(n, t) { var r, i, u; if (this.element = n, this.version = f.version, this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, ""), this.clickableElements = [], this.listeners = [], this.files = [], typeof this.element == "string" && (this.element = document.querySelector(this.element)), !(this.element && this.element.nodeType != null)) throw new Error("Invalid dropzone element."); if (this.element.dropzone) throw new Error("Dropzone already attached."); if (f.instances.push(this), this.element.dropzone = this, r = (u = f.optionsForElement(this.element)) != null ? u : {}, this.options = o({}, this.defaultOptions, r, t != null ? t : {}), this.options.forceFallback || !f.isBrowserSupported()) return this.options.fallback.call(this); if (this.options.url == null && (this.options.url = this.element.getAttribute("action")), !this.options.url) throw new Error("No URL provided."); if (this.options.acceptedFiles && this.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated."); this.options.acceptedMimeTypes && (this.options.acceptedFiles = this.options.acceptedMimeTypes, delete this.options.acceptedMimeTypes); this.options.renameFilename != null && (this.options.renameFile = function (n) { return function (t) { return n.options.renameFilename.call(n, t.name, t) } }(this)); this.options.method = this.options.method.toUpperCase(); (i = this.getExistingFallback()) && i.parentNode && i.parentNode.removeChild(i); this.options.previewsContainer !== !1 && (this.previewsContainer = this.options.previewsContainer ? f.getElement(this.options.previewsContainer, "previewsContainer") : this.element); this.options.clickable && (this.clickableElements = this.options.clickable === !0 ? [this.element] : f.getElements(this.options.clickable, "clickable")); this.init() } var o, e; return c(f, n), f.prototype.Emitter = i, f.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"], f.prototype.defaultOptions = { url: "/api/Uploader/Upload/", method: "post", withCredentials: !1, timeout: 3e4, parallelUploads: 1, uploadMultiple: !1, maxFilesize: 256, paramName: "file", createImageThumbnails: !0, maxThumbnailFilesize: 10, thumbnailWidth: 120, thumbnailHeight: 120, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: .8, resizeMethod: "contain", filesizeBase: 1e3, maxFiles: 5, params: {}, headers: null, clickable: !0, ignoreHiddenFiles: !0, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: !0, autoQueue: !0, addRemoveLinks: !1, previewsContainer: null, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: !1, dictDefaultMessage: "Drop files here to upload", dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "Cancel upload", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "Remove file", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function () { return t }, accept: function (n, t) { return t() }, fallback: function () { var i, r, e, t, u, n; for (this.element.className = this.element.className + " dz-browser-not-supported", u = this.element.getElementsByTagName("div"), r = 0, e = u.length; r < e; r++)if (i = u[r], /(^| )dz-message($| )/.test(i.className)) { t = i; i.className = "dz-message"; continue } return t || (t = f.createElement('<div class="dz-message"><span><\/span><\/div>'), this.element.appendChild(t)), n = t.getElementsByTagName("span")[0], n && (n.textContent != null ? n.textContent = this.options.dictFallbackMessage : n.innerText != null && (n.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm()) }, resize: function (n, t, i, r) { var u, f, e; if (u = { srcX: 0, srcY: 0, srcWidth: n.width, srcHeight: n.height }, f = n.width / n.height, t == null && i == null ? (t = u.srcWidth, i = u.srcHeight) : t == null ? t = i * f : i == null && (i = t / f), t = Math.min(t, u.srcWidth), i = Math.min(i, u.srcHeight), e = t / i, u.srcWidth > t || u.srcHeight > i) if (r === "crop") f > e ? (u.srcHeight = n.height, u.srcWidth = u.srcHeight * e) : (u.srcWidth = n.width, u.srcHeight = u.srcWidth / e); else if (r === "contain") f > e ? i = t / f : t = i * f; else throw new Error("Unknown resizeMethod '" + r + "'"); return u.srcX = (n.width - u.srcWidth) / 2, u.srcY = (n.height - u.srcHeight) / 2, u.trgWidth = t, u.trgHeight = i, u }, transformFile: function (n, t) { return (this.options.resizeWidth || this.options.resizeHeight) && n.type.match(/image.*/) ? this.resizeImage(n, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, t) : t(n) }, previewTemplate: '<div class="dz-preview dz-file-preview">\n  <div class="dz-image"><img data-dz-thumbnail /><\/div>\n  <div class="dz-details">\n    <div class="dz-size"><span data-dz-size><\/span><\/div>\n    <div class="dz-filename"><span data-dz-name><\/span><\/div>\n  <\/div>\n  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress><\/span><\/div>\n  <div class="dz-error-message"><span data-dz-errormessage><\/span><\/div>\n  <div class="dz-success-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Check<\/title>\n      <defs><\/defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"><\/path>\n      <\/g>\n    <\/svg>\n  <\/div>\n  <div class="dz-error-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Error<\/title>\n      <defs><\/defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475">\n          <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"><\/path>\n        <\/g>\n      <\/g>\n    <\/svg>\n  <\/div>\n<\/div>', drop: function () { return this.element.classList.remove("dz-drag-hover") }, dragstart: t, dragend: function () { return this.element.classList.remove("dz-drag-hover") }, dragenter: function () { return this.element.classList.add("dz-drag-hover") }, dragover: function () { return this.element.classList.add("dz-drag-hover") }, dragleave: function () { return this.element.classList.remove("dz-drag-hover") }, paste: t, reset: function () { return this.element.classList.remove("dz-started") }, addedfile: function (n) { var t, i, r, c, l, a, u, e, o, s, v, y, h; if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer) { for (n.previewElement = f.createElement(this.options.previewTemplate.trim()), n.previewTemplate = n.previewElement, this.previewsContainer.appendChild(n.previewElement), e = n.previewElement.querySelectorAll("[data-dz-name]"), t = 0, c = e.length; t < c; t++)u = e[t], u.textContent = n.name; for (o = n.previewElement.querySelectorAll("[data-dz-size]"), i = 0, l = o.length; i < l; i++)u = o[i], u.innerHTML = this.filesize(n.size); for (this.options.addRemoveLinks && (n._removeLink = f.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>' + this.options.dictRemoveFile + "<\/a>"), n.previewElement.appendChild(n._removeLink)), v = function (t) { return function (i) { return i.preventDefault(), i.stopPropagation(), n.status === f.UPLOADING ? f.confirm(t.options.dictCancelUploadConfirmation, function () { return t.removeFile(n) }) : t.options.dictRemoveFileConfirmation ? f.confirm(t.options.dictRemoveFileConfirmation, function () { return t.removeFile(n) }) : t.removeFile(n) } }(this), s = n.previewElement.querySelectorAll("[data-dz-remove]"), h = [], r = 0, a = s.length; r < a; r++)y = s[r], h.push(y.addEventListener("click", v)); return h } }, removedfile: function (n) { var t; return n.previewElement && (t = n.previewElement) != null && t.parentNode.removeChild(n.previewElement), this._updateMaxFilesReachedClass() }, thumbnail: function (n, t) { var i, f, r, u; if (n.previewElement) { for (n.previewElement.classList.remove("dz-file-preview"), r = n.previewElement.querySelectorAll("[data-dz-thumbnail]"), i = 0, f = r.length; i < f; i++)u = r[i], u.alt = n.name, u.src = t; return setTimeout(function () { return function () { return n.previewElement.classList.add("dz-image-preview") } }(this), 1) } }, error: function (n, t) { var i, f, e, r, u; if (n.previewElement) { for (n.previewElement.classList.add("dz-error"), typeof t != "String" && t.error && (t = t.error), r = n.previewElement.querySelectorAll("[data-dz-errormessage]"), u = [], i = 0, f = r.length; i < f; i++)e = r[i], u.push(e.textContent = t); return u } }, errormultiple: t, processing: function (n) { if (n.previewElement && (n.previewElement.classList.add("dz-processing"), n._removeLink)) return n._removeLink.textContent = this.options.dictCancelUpload }, processingmultiple: t, uploadprogress: function (n, t) { var i, e, r, f, u; if (n.previewElement) { for (f = n.previewElement.querySelectorAll("[data-dz-uploadprogress]"), u = [], i = 0, e = f.length; i < e; i++)r = f[i], r.nodeName === "PROGRESS" ? u.push(r.value = t) : u.push(r.style.width = t + "%"); return u } }, totaluploadprogress: t, sending: t, sendingmultiple: t, success: function (n) { if (n.previewElement) return n.previewElement.classList.add("dz-success") }, successmultiple: t, canceled: function (n) { return this.emit("error", n, "Upload canceled.") }, canceledmultiple: t, complete: function (n) { return n._removeLink && (n._removeLink.textContent = this.options.dictRemoveFile), n.previewElement ? n.previewElement.classList.add("dz-complete") : void 0 }, completemultiple: t, maxfilesexceeded: t, maxfilesreached: t, queuecomplete: t, addedfiles: t }, o = function () { var n, t, e, i, u, f, o; for (f = arguments[0], u = 2 <= arguments.length ? r.call(arguments, 1) : [], n = 0, e = u.length; n < e; n++) { i = u[n]; for (t in i) o = i[t], f[t] = o } return f }, f.prototype.getAcceptedFiles = function () { var t, n, u, i, r; for (i = this.files, r = [], n = 0, u = i.length; n < u; n++)t = i[n], t.accepted && r.push(t); return r }, f.prototype.getRejectedFiles = function () { var t, n, u, i, r; for (i = this.files, r = [], n = 0, u = i.length; n < u; n++)t = i[n], t.accepted || r.push(t); return r }, f.prototype.getFilesWithStatus = function (n) { var i, t, f, r, u; for (r = this.files, u = [], t = 0, f = r.length; t < f; t++)i = r[t], i.status === n && u.push(i); return u }, f.prototype.getQueuedFiles = function () { return this.getFilesWithStatus(f.QUEUED) }, f.prototype.getUploadingFiles = function () { return this.getFilesWithStatus(f.UPLOADING) }, f.prototype.getAddedFiles = function () { return this.getFilesWithStatus(f.ADDED) }, f.prototype.getActiveFiles = function () { var n, t, u, i, r; for (i = this.files, r = [], t = 0, u = i.length; t < u; t++)n = i[t], (n.status === f.UPLOADING || n.status === f.QUEUED) && r.push(n); return r }, f.prototype.init = function () { var i, n, e, t, o, r, u; for (this.element.tagName === "form" && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(f.createElement('<div class="dz-default dz-message"><span>' + this.options.dictDefaultMessage + "<\/span><\/div>")), this.clickableElements.length && (u = function (n) { return function () { return n.hiddenFileInput && n.hiddenFileInput.parentNode.removeChild(n.hiddenFileInput), n.hiddenFileInput = document.createElement("input"), n.hiddenFileInput.setAttribute("type", "file"), (n.options.maxFiles == null || n.options.maxFiles > 1) && n.hiddenFileInput.setAttribute("multiple", "multiple"), n.hiddenFileInput.className = "dz-hidden-input", n.options.acceptedFiles != null && n.hiddenFileInput.setAttribute("accept", n.options.acceptedFiles), n.options.capture != null && n.hiddenFileInput.setAttribute("capture", n.options.capture), n.hiddenFileInput.style.visibility = "hidden", n.hiddenFileInput.style.position = "absolute", n.hiddenFileInput.style.top = "0", n.hiddenFileInput.style.left = "0", n.hiddenFileInput.style.height = "0", n.hiddenFileInput.style.width = "0", document.querySelector(n.options.hiddenInputContainer).appendChild(n.hiddenFileInput), n.hiddenFileInput.addEventListener("change", function () { var r, t, i, f; if (t = n.hiddenFileInput.files, t.length) for (i = 0, f = t.length; i < f; i++)r = t[i], n.addFile(r); return n.emit("addedfiles", t), u() }) } }(this), u()), this.URL = (o = window.URL) != null ? o : window.webkitURL, r = this.events, n = 0, e = r.length; n < e; n++) { i = r[n]; this.on(i, this.options[i]) } this.on("uploadprogress", function (n) { return function () { return n.updateTotalUploadProgress() } }(this)); this.on("removedfile", function (n) { return function () { return n.updateTotalUploadProgress() } }(this)); this.on("canceled", function (n) { return function (t) { return n.emit("complete", t) } }(this)); this.on("complete", function (n) { return function () { if (n.getAddedFiles().length === 0 && n.getUploadingFiles().length === 0 && n.getQueuedFiles().length === 0) return setTimeout(function () { return n.emit("queuecomplete") }, 0) } }(this)); return t = function (n) { return n.stopPropagation(), n.preventDefault ? n.preventDefault() : n.returnValue = !1 }, this.listeners = [{ element: this.element, events: { dragstart: function (n) { return function (t) { return n.emit("dragstart", t) } }(this), dragenter: function (n) { return function (i) { return t(i), n.emit("dragenter", i) } }(this), dragover: function (n) { return function (i) { var r; try { r = i.dataTransfer.effectAllowed } catch (u) { } return i.dataTransfer.dropEffect = "move" === r || "linkMove" === r ? "move" : "copy", t(i), n.emit("dragover", i) } }(this), dragleave: function (n) { return function (t) { return n.emit("dragleave", t) } }(this), drop: function (n) { return function (i) { return t(i), n.drop(i) } }(this), dragend: function (n) { return function (t) { return n.emit("dragend", t) } }(this) } }], this.clickableElements.forEach(function (n) { return function (t) { return n.listeners.push({ element: t, events: { click: function (i) { return (t !== n.element || i.target === n.element || f.elementInside(i.target, n.element.querySelector(".dz-message"))) && n.hiddenFileInput.click(), !0 } } }) } }(this)), this.enable(), this.options.init.call(this) }, f.prototype.destroy = function () { var n; return this.disable(), this.removeAllFiles(!0), ((n = this.hiddenFileInput) != null ? n.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, f.instances.splice(f.instances.indexOf(this), 1) }, f.prototype.updateTotalUploadProgress = function () { var e, r, n, o, u, t, i, f; if (i = 0, t = 0, e = this.getActiveFiles(), e.length) { for (u = this.getActiveFiles(), n = 0, o = u.length; n < o; n++)r = u[n], i += r.upload.bytesSent, t += r.upload.total; f = 100 * i / t } else f = 100; return this.emit("totaluploadprogress", f, t, i) }, f.prototype._getParamName = function (n) { return typeof this.options.paramName == "function" ? this.options.paramName(n) : "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "") }, f.prototype._renameFile = function (n) { return typeof this.options.renameFile != "function" ? n.name : this.options.renameFile(n) }, f.prototype.getFallbackForm = function () { var r, i, n, t; return (r = this.getExistingFallback()) ? r : (n = '<div class="dz-fallback">', this.options.dictFallbackText && (n += "<p>" + this.options.dictFallbackText + "<\/p>"), n += '<input type="file" name="' + this._getParamName(0) + '" ' + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + ' /><input type="submit" value="Upload!"><\/div>', i = f.createElement(n), this.element.tagName !== "FORM" ? (t = f.createElement('<form action="' + this.options.url + '" enctype="multipart/form-data" method="' + this.options.method + '"><\/form>'), t.appendChild(i)) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), t != null ? t : i) }, f.prototype.getExistingFallback = function () { var i, r, n, u, t, f; for (r = function (n) { for (var i, t = 0, r = n.length; t < r; t++)if (i = n[t], /(^| )fallback($| )/.test(i.className)) return i }, t = ["div", "form"], n = 0, u = t.length; n < u; n++)if (f = t[n], i = r(this.element.getElementsByTagName(f))) return i }, f.prototype.setupEventListeners = function () { var t, i, n, f, e, r, u; for (r = this.listeners, u = [], n = 0, f = r.length; n < f; n++)t = r[n], u.push(function () { var n, r; n = t.events; r = []; for (i in n) e = n[i], r.push(t.element.addEventListener(i, e, !1)); return r }()); return u }, f.prototype.removeEventListeners = function () { var t, i, n, f, e, r, u; for (r = this.listeners, u = [], n = 0, f = r.length; n < f; n++)t = r[n], u.push(function () { var n, r; n = t.events; r = []; for (i in n) e = n[i], r.push(t.element.removeEventListener(i, e, !1)); return r }()); return u }, f.prototype.disable = function () { var r, n, u, t, i; for (this.clickableElements.forEach(function (n) { return n.classList.remove("dz-clickable") }), this.removeEventListeners(), t = this.files, i = [], n = 0, u = t.length; n < u; n++)r = t[n], i.push(this.cancelUpload(r)); return i }, f.prototype.enable = function () { return this.clickableElements.forEach(function (n) { return n.classList.add("dz-clickable") }), this.setupEventListeners() }, f.prototype.filesize = function (n) { var e, t, r, o, i, u, s, f; if (i = 0, u = "b", n > 0) { for (f = ["tb", "gb", "mb", "kb", "b"], t = r = 0, o = f.length; r < o; t = ++r)if (s = f[t], e = Math.pow(this.options.filesizeBase, 4 - t) / 10, n >= e) { i = n / Math.pow(this.options.filesizeBase, 4 - t); u = s; break } i = Math.round(10 * i) / 10 } return "<strong>" + i + "<\/strong> " + this.options.dictFileSizeUnits[u] }, f.prototype._updateMaxFilesReachedClass = function () { return this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached") }, f.prototype.drop = function (n) { var i, t; n.dataTransfer && (this.emit("drop", n), i = n.dataTransfer.files, this.emit("addedfiles", i), i.length && (t = n.dataTransfer.items, t && t.length && t[0].webkitGetAsEntry != null ? this._addFilesFromItems(t) : this.handleFiles(i))) }, f.prototype.paste = function (n) { var t, i; if ((n != null ? (i = n.clipboardData) != null ? i.items : void 0 : void 0) != null) return this.emit("paste", n), t = n.clipboardData.items, t.length ? this._addFilesFromItems(t) : void 0 }, f.prototype.handleFiles = function (n) { var r, t, u, i; for (i = [], t = 0, u = n.length; t < u; t++)r = n[t], i.push(this.addFile(r)); return i }, f.prototype._addFilesFromItems = function (n) { var r, t, u, f, i; for (i = [], u = 0, f = n.length; u < f; u++)t = n[u], t.webkitGetAsEntry != null && (r = t.webkitGetAsEntry()) ? r.isFile ? i.push(this.addFile(t.getAsFile())) : r.isDirectory ? i.push(this._addFilesFromDirectory(r, r.name)) : i.push(void 0) : t.getAsFile != null ? t.kind == null || t.kind === "file" ? i.push(this.addFile(t.getAsFile())) : i.push(void 0) : i.push(void 0); return i }, f.prototype._addFilesFromDirectory = function (n, t) { var r, u, i; return r = n.createReader(), u = function (n) { if (typeof console != "undefined" && console !== null) return typeof console.log == "function" ? console.log(n) : void 0 }, i = function (n) { return function () { return r.readEntries(function (r) { var u, f, e; if (r.length > 0) { for (f = 0, e = r.length; f < e; f++)u = r[f], u.isFile ? u.file(function (i) { if (!n.options.ignoreHiddenFiles || i.name.substring(0, 1) !== ".") return i.fullPath = t + "/" + i.name, n.addFile(i) }) : u.isDirectory && n._addFilesFromDirectory(u, t + "/" + u.name); i() } return null }, u) } }(this), i() }, f.prototype.accept = function (n, t) { return n.size > this.options.maxFilesize * 1048576 ? t(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(n.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : f.isValidFile(n, this.options.acceptedFiles) ? this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles ? (t(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", n)) : this.options.accept.call(this, n, t) : t(this.options.dictInvalidFileType) }, f.prototype.addFile = function (n) { return n.upload = { progress: 0, total: n.size, bytesSent: 0, filename: this._renameFile(n) }, this.files.push(n), n.status = f.ADDED, this.emit("addedfile", n), this._enqueueThumbnail(n), this.accept(n, function (t) { return function (i) { return i ? (n.accepted = !1, t._errorProcessing([n], i)) : (n.accepted = !0, t.options.autoQueue && t.enqueueFile(n)), t._updateMaxFilesReachedClass() } }(this)) }, f.prototype.enqueueFiles = function (n) { for (var i, t = 0, r = n.length; t < r; t++)i = n[t], this.enqueueFile(i); return null }, f.prototype.enqueueFile = function (n) { if (n.status === f.ADDED && n.accepted === !0) { if (n.status = f.QUEUED, this.options.autoProcessQueue) return setTimeout(function (n) { return function () { return n.processQueue() } }(this), 0) } else throw new Error("This file can't be queued because it has already been processed or was rejected."); }, f.prototype._thumbnailQueue = [], f.prototype._processingThumbnail = !1, f.prototype._enqueueThumbnail = function (n) { if (this.options.createImageThumbnails && n.type.match(/image.*/) && n.size <= this.options.maxThumbnailFilesize * 1048576) return this._thumbnailQueue.push(n), setTimeout(function (n) { return function () { return n._processThumbnailQueue() } }(this), 0) }, f.prototype._processThumbnailQueue = function () { var n; if (!this._processingThumbnail && this._thumbnailQueue.length !== 0) return this._processingThumbnail = !0, n = this._thumbnailQueue.shift(), this.createThumbnail(n, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, !0, function (t) { return function (i) { return t.emit("thumbnail", n, i), t._processingThumbnail = !1, t._processThumbnailQueue() } }(this)) }, f.prototype.removeFile = function (n) { return n.status === f.UPLOADING && this.cancelUpload(n), this.files = h(this.files, n), this.emit("removedfile", n), this.files.length === 0 ? this.emit("reset") : void 0 }, f.prototype.removeAllFiles = function (n) { var i, t, u, r; for (n == null && (n = !1), r = this.files.slice(), t = 0, u = r.length; t < u; t++)i = r[t], (i.status !== f.UPLOADING || n) && this.removeFile(i); return null }, f.prototype.resizeImage = function (n, t, i, r, e) { return this.createThumbnail(n, t, i, r, !1, function (t) { return function (i, r) { var o, s; return r === null ? e(n) : (o = t.options.resizeMimeType, o == null && (o = n.type), s = r.toDataURL(o, t.options.resizeQuality), (o === "image/jpeg" || o === "image/jpg") && (s = u.restore(n.dataURL, s)), e(f.dataURItoBlob(s))) } }(this)) }, f.prototype.createThumbnail = function (n, t, i, r, u, f) { var e; return e = new FileReader, e.onload = function (o) { return function () { if (n.dataURL = e.result, n.type === "image/svg+xml") { f != null && f(e.result); return } return o.createThumbnailFromUrl(n, t, i, r, u, f) } }(this), e.readAsDataURL(n) }, f.prototype.createThumbnailFromUrl = function (n, t, i, r, u, f, e) { var o; return o = document.createElement("img"), e && (o.crossOrigin = e), o.onload = function (e) { return function () { var h; return h = function (n) { return n(1) }, typeof EXIF != "undefined" && EXIF !== null && u && (h = function (n) { return EXIF.getData(o, function () { return n(EXIF.getTag(this, "Orientation")) }) }), h(function (u) { var c, h, a, v, y, p, l, w; n.width = o.width; n.height = o.height; l = e.options.resize.call(e, n, t, i, r); c = document.createElement("canvas"); h = c.getContext("2d"); c.width = l.trgWidth; c.height = l.trgHeight; u > 4 && (c.width = l.trgHeight, c.height = l.trgWidth); switch (u) { case 2: h.translate(c.width, 0); h.scale(-1, 1); break; case 3: h.translate(c.width, c.height); h.rotate(Math.PI); break; case 4: h.translate(0, c.height); h.scale(1, -1); break; case 5: h.rotate(.5 * Math.PI); h.scale(1, -1); break; case 6: h.rotate(.5 * Math.PI); h.translate(0, -c.height); break; case 7: h.rotate(.5 * Math.PI); h.translate(c.width, -c.height); h.scale(-1, 1); break; case 8: h.rotate(-.5 * Math.PI); h.translate(-c.width, 0) }return s(h, o, (a = l.srcX) != null ? a : 0, (v = l.srcY) != null ? v : 0, l.srcWidth, l.srcHeight, (y = l.trgX) != null ? y : 0, (p = l.trgY) != null ? p : 0, l.trgWidth, l.trgHeight), w = c.toDataURL("image/png"), f != null ? f(w, c) : void 0 }) } }(this), f != null && (o.onerror = f), o.src = n.dataURL }, f.prototype.processQueue = function () { var r, t, i, n; if ((t = this.options.parallelUploads, i = this.getUploadingFiles().length, r = i, !(i >= t)) && (n = this.getQueuedFiles(), n.length > 0)) { if (this.options.uploadMultiple) return this.processFiles(n.slice(0, t - i)); while (r < t) { if (!n.length) return; this.processFile(n.shift()); r++ } } }, f.prototype.processFile = function (n) { return this.processFiles([n]) }, f.prototype.processFiles = function (n) { for (var t, i = 0, r = n.length; i < r; i++)t = n[i], t.processing = !0, t.status = f.UPLOADING, this.emit("processing", t); return this.options.uploadMultiple && this.emit("processingmultiple", n), this.uploadFiles(n) }, f.prototype._getFilesWithXhr = function (n) { var t; return function () { var i, f, r, u; for (r = this.files, u = [], i = 0, f = r.length; i < f; i++)t = r[i], t.xhr === n && u.push(t); return u }.call(this) }, f.prototype.cancelUpload = function (n) { var i, t, r, u, e, o, s; if (n.status === f.UPLOADING) { for (t = this._getFilesWithXhr(n.xhr), r = 0, e = t.length; r < e; r++)i = t[r], i.status = f.CANCELED; for (n.xhr.abort(), u = 0, o = t.length; u < o; u++)i = t[u], this.emit("canceled", i); this.options.uploadMultiple && this.emit("canceledmultiple", t) } else ((s = n.status) === f.ADDED || s === f.QUEUED) && (n.status = f.CANCELED, this.emit("canceled", n), this.options.uploadMultiple && this.emit("canceledmultiple", [n])); if (this.options.autoProcessQueue) return this.processQueue() }, e = function () { var t, n; return (n = arguments[0], t = 2 <= arguments.length ? r.call(arguments, 1) : [], typeof n == "function") ? n.apply(this, t) : n }, f.prototype.uploadFile = function (n) { return this.uploadFiles([n]) }, f.prototype.uploadFiles = function (n) { var st, ht, i, r, b, k, d, a, h, u, g, nt, v, y, tt, p, ct, lt, at, vt, w, yt, c, it, pt, wt, rt, ut, ft, bt, l, s, et, ot, kt, dt, t; for (t = new XMLHttpRequest, v = 0, ct = n.length; v < ct; v++)i = n[v], i.xhr = t; yt = e(this.options.method, n); kt = e(this.options.url, n); t.open(yt, kt, !0); t.timeout = e(this.options.timeout, n); t.withCredentials = !!this.options.withCredentials; s = null; b = function (r) { return function () { var u, e, f; for (f = [], u = 0, e = n.length; u < e; u++)i = n[u], f.push(r._errorProcessing(n, s || r.options.dictResponseError.replace("{{statusCode}}", t.status), t)); return f } }(this); ot = function (t) { return function (r) { var s, f, e, c, l, a, o, u, h; if (r != null) for (u = 100 * r.loaded / r.total, f = 0, c = n.length; f < c; f++)i = n[f], i.upload.progress = u, i.upload.total = r.total, i.upload.bytesSent = r.loaded; else { for (s = !0, u = 100, e = 0, l = n.length; e < l; e++)i = n[e], i.upload.progress === 100 && i.upload.bytesSent === i.upload.total || (s = !1), i.upload.progress = u, i.upload.bytesSent = i.upload.total; if (s) return } for (h = [], o = 0, a = n.length; o < a; o++)i = n[o], h.push(t.emit("uploadprogress", i, u, i.upload.bytesSent)); return h } }(this); t.onload = function (i) { return function (r) { var e, u; if (n[0].status !== f.CANCELED && t.readyState === 4) { if (t.responseType !== "arraybuffer" && t.responseType !== "blob" && (s = t.responseText, t.getResponseHeader("content-type") && ~t.getResponseHeader("content-type").indexOf("application/json"))) try { s = JSON.parse(s) } catch (e) { r = e; s = "Invalid JSON response from server." } return ot(), 200 <= (u = t.status) && u < 300 ? i._finished(n, s, r) : b() } } }(this); t.onerror = function () { return function () { if (n[0].status !== f.CANCELED) return b() } }(this); pt = (wt = t.upload) != null ? wt : t; pt.onprogress = ot; a = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" }; this.options.headers && o(a, this.options.headers); for (k in a) d = a[k], d && t.setRequestHeader(k, d); if (r = new FormData, this.options.params) { rt = this.options.params; for (tt in rt) dt = rt[tt], r.append(tt, dt) } for (y = 0, lt = n.length; y < lt; y++)i = n[y], this.emit("sending", i, t, r); if (this.options.uploadMultiple && this.emit("sendingmultiple", n, t, r), this.element.tagName === "FORM") for (ut = this.element.querySelectorAll("input, textarea, select, button"), p = 0, at = ut.length; p < at; p++)if (u = ut[p], g = u.getAttribute("name"), nt = u.getAttribute("type"), u.tagName === "SELECT" && u.hasAttribute("multiple")) for (ft = u.options, w = 0, vt = ft.length; w < vt; w++)it = ft[w], it.selected && r.append(g, it.value); else (!nt || (bt = nt.toLowerCase()) !== "checkbox" && bt !== "radio" || u.checked) && r.append(g, u.value); for (st = 0, et = [], h = c = 0, l = n.length - 1; 0 <= l ? c <= l : c >= l; h = 0 <= l ? ++c : --c)ht = function (i) { return function (u, f, e) { return function (u) { return r.append(f, u, e), ++st === n.length ? i.submitRequest(t, r, n) : void 0 } } }(this), et.push(this.options.transformFile.call(this, n[h], ht(n[h], this._getParamName(h), n[h].upload.filename))); return et }, f.prototype.submitRequest = function (n, t) { return n.send(t) }, f.prototype._finished = function (n, t, i) { for (var r, u = 0, e = n.length; u < e; u++)r = n[u], r.status = f.SUCCESS, this.emit("success", r, t, i), this.emit("complete", r); return this.options.uploadMultiple && (this.emit("successmultiple", n, t, i), this.emit("completemultiple", n)), this.options.autoProcessQueue ? this.processQueue() : void 0 }, f.prototype._errorProcessing = function (n, t, i) { for (var r, u = 0, e = n.length; u < e; u++)r = n[u], r.status = f.ERROR, this.emit("error", r, t, i), this.emit("complete", r); return this.options.uploadMultiple && (this.emit("errormultiple", n, t, i), this.emit("completemultiple", n)), this.options.autoProcessQueue ? this.processQueue() : void 0 }, f }(i); n.version = "5.1.1"; n.options = {}; n.optionsForElement = function (t) { if (t.getAttribute("id")) return n.options[f(t.getAttribute("id"))] }; n.instances = []; n.forElement = function (n) { if (typeof n == "string" && (n = document.querySelector(n)), (n != null ? n.dropzone : void 0) == null) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone."); return n.dropzone }; n.autoDiscover = !1; n.discover = function () { var u, f, t, i, e, r; for (document.querySelectorAll ? t = document.querySelectorAll(".dropzone") : (t = [], u = function (n) { var u, i, f, r; for (r = [], i = 0, f = n.length; i < f; i++)u = n[i], /(^| )dropzone($| )/.test(u.className) ? r.push(t.push(u)) : r.push(void 0); return r }, u(document.getElementsByTagName("div")), u(document.getElementsByTagName("form"))), r = [], i = 0, e = t.length; i < e; i++)f = t[i], n.optionsForElement(f) !== !1 ? r.push(new n(f)) : r.push(void 0); return r }; n.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i]; n.isBrowserSupported = function () { var t, i, u, r, f; if (t = !0, window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) if ("classList" in document.createElement("a")) { for (r = n.blacklistedBrowsers, i = 0, u = r.length; i < u; i++)if (f = r[i], f.test(navigator.userAgent)) { t = !1; continue } } else t = !1; else t = !1; return t }; n.dataURItoBlob = function (n) { var f, r, u, e, t, o, i; for (r = atob(n.split(",")[1]), o = n.split(",")[0].split(":")[1].split(";")[0], f = new ArrayBuffer(r.length), e = new Uint8Array(f), u = t = 0, i = r.length; 0 <= i ? t <= i : t >= i; u = 0 <= i ? ++t : --t)e[u] = r.charCodeAt(u); return new Blob([f], { type: o }) }; h = function (n, t) { var r, i, f, u; for (u = [], i = 0, f = n.length; i < f; i++)r = n[i], r !== t && u.push(r); return u }; f = function (n) { return n.replace(/[\-_](\w)/g, function (n) { return n.charAt(1).toUpperCase() }) }; n.createElement = function (n) { var t; return t = document.createElement("div"), t.innerHTML = n, t.childNodes[0] }; n.elementInside = function (n, t) { if (n === t) return !0; while (n = n.parentNode) if (n === t) return !0; return !1 }; n.getElement = function (n, t) { var i; if (typeof n == "string" ? i = document.querySelector(n) : n.nodeType != null && (i = n), i == null) throw new Error("Invalid `" + t + "` option provided. Please provide a CSS selector or a plain HTML element."); return i }; n.getElements = function (n, t) { var h, r, i, c, u, f, o, s, e; if (n instanceof Array) { i = []; try { for (u = 0, o = n.length; u < o; u++)r = n[u], i.push(this.getElement(r, t)) } catch (c) { h = c; i = null } } else if (typeof n == "string") for (i = [], e = document.querySelectorAll(n), f = 0, s = e.length; f < s; f++)r = e[f], i.push(r); else n.nodeType != null && (i = [n]); if (!(i != null && i.length)) throw new Error("Invalid `" + t + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."); return i }; n.confirm = function (n, t, i) { return window.confirm(n) ? t() : i != null ? i() : void 0 }; n.isValidFile = function (n, t) { var f, r, e, u, i; if (!t) return !0; for (t = t.split(","), u = n.type, f = u.replace(/\/.*$/, ""), r = 0, e = t.length; r < e; r++)if (i = t[r], i = i.trim(), i.charAt(0) === ".") { if (n.name.toLowerCase().indexOf(i.toLowerCase(), n.name.length - i.length) !== -1) return !0 } else if (/\/\*$/.test(i)) { if (f === i.replace(/\/.*$/, "")) return !0 } else if (u === i) return !0; return !1 }; typeof jQuery != "undefined" && jQuery !== null && (jQuery.fn.dropzone = function (t) { return this.each(function () { return new n(this, t) }) }); typeof module != "undefined" && module !== null ? module.exports = n : window.Dropzone = n; n.ADDED = "added"; n.QUEUED = "queued"; n.ACCEPTED = n.QUEUED; n.UPLOADING = "uploading"; n.PROCESSING = n.UPLOADING; n.CANCELED = "canceled"; n.ERROR = "error"; n.SUCCESS = "success"; o = function (n) { var s, r, f, h, e, i, c, t, o, u; for (c = n.naturalWidth, i = n.naturalHeight, r = document.createElement("canvas"), r.width = 1, r.height = i, f = r.getContext("2d"), f.drawImage(n, 0, 0), h = f.getImageData(1, 0, 1, i).data, u = 0, e = i, t = i; t > u;)s = h[(t - 1) * 4 + 3], s === 0 ? e = t : u = t, t = e + u >> 1; return o = t / i, o === 0 ? 1 : o }; s = function (n, t, i, r, u, f, e, s, h, c) { var l; return l = o(t), n.drawImage(t, i, r, u, f, e, s, h, c / l) }; u = function () { function n() { } return n.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", n.encode64 = function (n) { var u, t, i, o, s, f, r, e, h; for (h = "", u = void 0, t = void 0, i = "", o = void 0, s = void 0, f = void 0, r = "", e = 0; ;)if (u = n[e++], t = n[e++], i = n[e++], o = u >> 2, s = (u & 3) << 4 | t >> 4, f = (t & 15) << 2 | i >> 6, r = i & 63, isNaN(t) ? f = r = 64 : isNaN(i) && (r = 64), h = h + this.KEY_STR.charAt(o) + this.KEY_STR.charAt(s) + this.KEY_STR.charAt(f) + this.KEY_STR.charAt(r), u = t = i = "", o = s = f = r = "", !(e < n.length)) break; return h }, n.restore = function (n, t) { var i, r, u; return n.match("data:image/jpeg;base64,") ? (r = this.decode64(n.replace("data:image/jpeg;base64,", "")), u = this.slice2Segments(r), i = this.exifManipulation(t, u), "data:image/jpeg;base64," + this.encode64(i)) : t }, n.exifManipulation = function (n, t) { var i, r; return i = this.getExifArray(t), r = this.insertExif(n, i), new Uint8Array(r) }, n.getExifArray = function (n) { for (var t = void 0, i = 0; i < n.length;) { if (t = n[i], t[0] === 255 & t[1] === 225) return t; i++ } return [] }, n.insertExif = function (n, t) { var i, f, r, e, o, u; return e = n.replace("data:image/jpeg;base64,", ""), r = this.decode64(e), u = r.indexOf(255, 3), o = r.slice(0, u), f = r.slice(u), i = o, i = i.concat(t), i.concat(f) }, n.slice2Segments = function (n) { for (var i, u, f, t = 0, r = []; ;) { if (n[t] === 255 & n[t + 1] === 218) break; if (n[t] === 255 & n[t + 1] === 216 ? t += 2 : (u = n[t + 2] * 256 + n[t + 3], i = t + u + 2, f = n.slice(t, i), r.push(f), t = i), t > n.length) break } return r }, n.decode64 = function (n) { var c, r, e, o, s, h, u, t, f, i, l; for (l = "", e = void 0, o = void 0, s = "", h = void 0, u = void 0, t = void 0, f = "", i = 0, r = [], c = /[^A-Za-z0-9\+\/\=]/g, c.exec(n) && console.warning("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), n = n.replace(/[^A-Za-z0-9\+\/\=]/g, ""); ;)if (h = this.KEY_STR.indexOf(n.charAt(i++)), u = this.KEY_STR.indexOf(n.charAt(i++)), t = this.KEY_STR.indexOf(n.charAt(i++)), f = this.KEY_STR.indexOf(n.charAt(i++)), e = h << 2 | u >> 4, o = (u & 15) << 4 | t >> 2, s = (t & 3) << 6 | f, r.push(e), t !== 64 && r.push(o), f !== 64 && r.push(s), e = o = s = "", h = u = t = f = "", !(i < n.length)) break; return r }, n }(); e = function (n, t) { var f, i, e, r, o, u, c, s, h; if (e = !1, h = !0, i = n.document, s = i.documentElement, f = i.addEventListener ? "addEventListener" : "attachEvent", c = i.addEventListener ? "removeEventListener" : "detachEvent", u = i.addEventListener ? "" : "on", r = function (f) { if (f.type !== "readystatechange" || i.readyState === "complete") return (f.type === "load" ? n : i)[c](u + f.type, r, !1), !e && (e = !0) ? t.call(n, f.type || f) : void 0 }, o = function () { var n, t; try { s.doScroll("left") } catch (t) { n = t; setTimeout(o, 50); return } return r("poll") }, i.readyState !== "complete") { if (i.createEventObject && s.doScroll) { try { h = !n.frameElement } catch (l) { } h && o() } return i[f](u + "DOMContentLoaded", r, !1), i[f](u + "readystatechange", r, !1), n[f](u + "load", r, !1) } }; n._autoDiscoverFunction = function () { if (n.autoDiscover) return n.discover() }; e(window, n._autoDiscoverFunction) }).call(this);